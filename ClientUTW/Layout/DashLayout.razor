
@using ClientUTW.Auth
@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavManager

<HeadContent>

    <link rel="stylesheet" href="css/adminkit.css" />

</HeadContent>
<RadzenComponents/>

<div class="wrapper">
    <DashMenu/>

    <div class="main">
        @if (_authState?.User?.Identity != null && _authState.User.Identity.IsAuthenticated)
        {
        <nav class="navbar navbar-expand navbar-light navbar-bg">
            <div class="navbar-collapse collapse">
                <ul class="navbar-nav navbar-align">
                    <li class="nav-item dropdown">
                        <a
                            class="nav-link dropdown-toggle d-none d-sm-inline-block"
                            href="#"
                            data-bs-toggle="dropdown">
                            <span class="text-dark">@_authState.User.Identity.Name</span>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end">
                            <a class="dropdown-item" href="#" @onclick="@Logout">Wyloguj się</a>
                        </div>
                    </li>
                </ul>
            </div>
        </nav>

        }
        <main class="content">
            @Body
        </main>

    </div>
</div>



<script src="js/Adminapp.js"></script>


@code {
AuthenticationState? _authState;


protected override async Task OnInitializedAsync()
{
_authState = await AuthStateProvider.GetAuthenticationStateAsync();
}

private async Task Logout()
{

var customAuthStateProvider = (AuthStateProvider)AuthStateProvider;
await customAuthStateProvider.UpdateAuthenticationState(null!);
NavManager.NavigateTo("/", replace: true);
}
}
